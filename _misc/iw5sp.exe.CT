<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <CheatEntries>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Kill Anti CE (aob)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(antiDbg_Caller,$process,E8 ?? ?? ?? ?? C7 46 14 00 00 00 00 C7 46 04 00 00 00 00 B8 01 00 00 00 59 C3)
registersymbol( antiDbg_Caller )
registersymbol( antiDbg_disThr )
alloc(antiDbg_disThr,$1000,$process)
CreateThread( antiDbg_disThr )

label(old_protect)
label(wrtieLoc)

// the antiDbg itself is initiated like three other threads.
// so direct aob is not an option.
// we find a caller that its aob is unique and calculate antiDbg position from there.

antiDbg_disThr:
  // if you wanna debug. make sure debugger is attached
  // int 3


  // calculating relative call address
  mov eax, antiDbg_Caller+5
  mov ecx, antiDbg_Caller
  mov ecx, [ecx+1]
  add ecx, eax

  mov [wrtieLoc],ecx

  // need to call virtualprotect else crash
  push old_protect        // Address to store old protection
  push 0x40               // PAGE_EXECUTE_READWRITE (4)
  push 1                  // Size to modify
  push [wrtieLoc]                // Starting address
  call kernel32.VirtualProtect // Call function (stdcall cleans 16 bytes)

  // assembling
  mov ecx,[wrtieLoc] // ecx was poluted by VirtualProtect, so re-populate
  mov [ecx],000001b8 // mov eax,00000001
  mov [ecx+4],ccccc300 // ret + remaining 00 from prev command


  push old_protect        // Address to store old protection (not needed this time)
  push [old_protect]      // Original protection value
  push 1                  // Size to modify
  push [wrtieLoc]                // Starting address
  call kernel32.VirtualProtect

// no looping needed so we just terminate the thread
// we must be sure stack is just like when started
ret
// from now on, OS will take care of things


old_protect:
 dd 00

wrtieLoc:
 dd 00


[DISABLE]

{
// ORIGINAL CODE - INJECTION POINT: iw5sp.exe+226F50

iw5sp.exe+226F31: E8 9A BF DD FF        - call iw5sp.exe+2ED0
iw5sp.exe+226F36: 8B 46 14              - mov eax,[esi+14]
iw5sp.exe+226F39: 83 E8 01              - sub eax,01
iw5sp.exe+226F3C: 75 12                 - jne iw5sp.exe+226F50
iw5sp.exe+226F3E: 8B 44 24 0C           - mov eax,[esp+0C]
iw5sp.exe+226F42: 8B 4C 24 08           - mov ecx,[esp+08]
iw5sp.exe+226F46: 50                    - push eax
iw5sp.exe+226F47: 51                    - push ecx
iw5sp.exe+226F48: E8 13 3E ED FF        - call iw5sp.exe+FAD60
iw5sp.exe+226F4D: 83 C4 08              - add esp,08
iw5sp.exe+226F50: E8 BB AD 1B 00        - call iw5sp.exe+3E1D10
// ---------- INJECTING HERE ----------
iw5sp.exe+226F55: C7 46 14 00 00 00 00  - mov [esi+14],00000000
// ---------- DONE INJECTING  ----------
iw5sp.exe+226F5C: C7 46 04 00 00 00 00  - mov [esi+04],00000000
iw5sp.exe+226F63: B8 01 00 00 00        - mov eax,00000001
iw5sp.exe+226F68: 59                    - pop ecx
iw5sp.exe+226F69: C3                    - ret
iw5sp.exe+226F6A: CC                    - int 3
iw5sp.exe+226F6B: CC                    - int 3
iw5sp.exe+226F6C: CC                    - int 3
iw5sp.exe+226F6D: CC                    - int 3
iw5sp.exe+226F6E: CC                    - int 3
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>36</ID>
      <Description>"***** static stuff (v1.9.461) *********"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"GScr_LoadScriptAndLabel_map call hook"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(FileName)

// GScr_LoadScriptAndLabel_map
// concat "map/"


newmem:

originalcode:
call iw5sp.exe.text+1CD2F0

mov eax, FileName
call iw5sp.exe.text+1CD2F0

exit:
jmp returnhere


FileName:
//db 'K:\windows-x64-release\compiled\iw5\sample.gscbin',0
db 'sample',0


"iw5sp.exe"+FDE9A:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+FDE9A:
db E8 51 04 0D 00
//call iw5sp.exe.text+1CD2F0
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Thread: load and link script"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

alloc( CheatHandlerThread_HUD_act, 0x1000, $process )
registersymbol( CheatHandlerThread_HUD_act )
CreateThread( CheatHandlerThread_HUD_act )
label(FileName)


CheatHandlerThread_HUD_act:
// stack protection in case CheatHandlerThread_HUD_act is called from game code
push rbp
  mov rbp,rsp

  sub rsp,500 //220
  and rsp,-10 //  aligning the stack with the next lowest 16-byte boundary


//int 3 //for debugging the thread


mov edx,FileName
push edx
call "iw5sp.exe.text"+D35D0 // Scr_LoadScript
//return val in EAX



mov edx, Buf
mov [address], edx

mov     esi, maxSize
push    680  // 672 == main  // 680 == init
mov     edi, FileName
call    "iw5sp.exe.text"+1CCF40 //GScr_LoadScriptAndLabel

// esi
mov     ecx, [maxSize+8] // get buff
mov     eax, [maxSize+4] // get count
mov     ecx, [ecx+eax*4]
// ecx now has handle

push    0
push    ecx



/*

//execute vm bytes
call "iw5sp.exe.text"+FB590  //Scr_ExecThread
// must free it
push    eax
call "iw5sp.exe.text"+11ED90 //Scr_FreeThread

*/

  mov rsp,rbp
  pop rbp


ret


FileName:
db 'sample',0


// build struct
Buf:
  resb 1000

maxSize:
  DD 512

count:
  DD 00

address:
  DD 00


[DISABLE]

dealloc( CheatHandlerThread_HUD_act )
unregistersymbol( CheatHandlerThread_HUD_act )



</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"hook DB_LinkXAssetEntry1 to call GetRawFile  "</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,50000)
label(returnhere)
label(originalcode)
label(exit)



registersymbol(allocedBuff)


label(name)
label(compressedLen)
label(len)
label(buffer)
label(dummyName)

newmem:
pushad
pushfd

push ebp
  mov ebp,esp

  sub esp,100
  and esp,-10 //  aligning the stack with the next lowest 16-byte boundary


//mov [dummyName],


//mov [name], dummyName


// ebp was push so +4 must added

mov edi,[ebp+18] // EDI will be FileType


mov eax,[ebp+1c] // get ScriptFile*
mov eax,[eax]

/*
mov ecx,[ecx+4] // compressedLen

mov ecx,[ecx+8] // len

mov ecx,[ecx+c] // bytecodeLen

mov ecx,[ecx+10] // buffer
*/

mov ecx,eax
mov ecx,[ecx+4] // compressedLen
mov [compressedLen], ecx


mov ecx,eax
mov ecx,[ecx+8] // len
mov [len], ecx

mov ecx,eax
mov ecx,[ecx+10] // buffer
mov [buffer], ecx



push #100000
push allocedBuff
push name
call "iw5sp.exe"+D0030


leave

popfd
popad

originalcode:
push ebx
push ebp
mov ebp,[esp+1C]

exit:
jmp returnhere




name:
dd 0

compressedLen:
dd 0

len:
dd 0

buffer:
dd 0

dummyName:
db 'dummyFileName',0

allocedBuff:
dd 00




"iw5sp.exe"+1857C9: // LiknAsset_1 at 4th line
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+1857C9:
db 53 55 8B 6C 24 1C

unregistersymbol(allocedBuff)

//push ebx
//push ebp
//mov ebp,[esp+1C]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"hook DB_LinkXAssetEntry0 for asset name"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(restore)

label(filename)
label(string)
label(newline)
label(hFile)
label(bytesWritten)


label(write_loop)
label(write_next)
label(write_newline)
label(file_error)

label(XAssetEntry)

newmem:

pushfd
pushad


mov [XAssetEntry], esi

// get XAsset's type and filter by it
//cmp [esi], 26
//jne restore


mov [string], eax


push ebp
mov ebp,esp

sub esp, 200


// Open or create the file
    push 80        // dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL
    push 04        // dwCreationDisposition =
    push 00        // lpSecurityAttributes = NULL
    push 00        // dwShareMode = 0 (no sharing)
    push 10000000        // dwDesiredAccess
    push filename    // lpFileName = address of filename
    call CreateFileA       // Create or open file

    mov [hFile], eax       // Save the file handle

    // Check if file handle is invalid
    cmp eax, -1
    je file_error          // If handle is invalid, jump to error

write_loop:
    // Write the string to the file byte by byte
    mov esi, [string]        // Address of the string
    write_next:
        lodsb              // Load next byte from string into AL
        cmp al, 00       // Check if the byte is 0x00 (null terminator)
        je write_newline   // If null terminator, write newline and continue
        push 00    // lpOverlapped = NULL
        push bytesWritten // lpNumberOfBytesWritten = address of bytesWritten
        push 1       // nNumberOfBytesToWrite = 1
        push esi     // lpBuffer = address of byte to write
        push [hFile] // hFile = file handle
        call WriteFile     // Write the byte to the file
        jmp write_next     // Continue writing

write_newline:
    push 00        // lpOverlapped = NULL
    push bytesWritten // lpNumberOfBytesWritten = address of bytesWritten
    push 1           // nNumberOfBytesToWrite = 1
    push newline     // lpBuffer = address of newline character
    push [hFile]     // hFile = file handle
    call WriteFile         // Write the newline to the file
    //add esi, 1             // Skip the null byte
    //cmp byte [esi], 00   // Check if it's the end of the string (double null)
    //jne write_next         // If not, continue writing

file_error:
    push [hFile]     // hFile = file handle
    call CloseHandle       // Close the file


add esp, 200
leave

restore:
popad
popfd


originalcode:
mov ebp,eax
add esp,04

exit:
jmp returnhere


filename:
db 'E:\Call of Duty - Modern Warfare 3\Log_LinkAssetEntry0.txt', 0

string:
dd 00

newline:
db 0A

hFile:
dd 00

bytesWritten:
dd 00

XAssetEntry:
dd 00


"iw5sp.exe"+1855DE:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+1855DE:
db 8B E8 83 C4 04
//mov ebp,eax
//add esp,04
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"hook DB_LinkXAssetEntry0 for asset name lua print"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(restore)

label(filename)
label(string)
label(newline)
label(hFile)
label(bytesWritten)

label(XAssetEntry)

newmem:

pushfd
pushad


mov [XAssetEntry], esi

// get XAsset's type and filter by it
//cmp [esi], 26
//jne restore


mov [string], eax


push ebp
mov ebp,esp

sub esp, 200

// print(readString(xAssetName) + "  --&gt;&gt; type: " + string.format("%#x", readInteger(Type)))

{$luacode xAssetName=eax Type=esi}
print(readString(xAssetName) .. "  --&gt;&gt; Type: " .. string.format("%#x", readInteger(Type)))
{$asm}


add esp, 200
leave

restore:
popad
popfd


originalcode:
mov ebp,eax
add esp,04

exit:
jmp returnhere


filename:
db 'E:\Call of Duty - Modern Warfare 3\Log_LinkAssetEntry0.txt', 0

string:
dd 00

newline:
db 0A

hFile:
dd 00

bytesWritten:
dd 00

XAssetEntry:
dd 00


"iw5sp.exe"+1855DE:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+1855DE:
db 8B E8 83 C4 04
//mov ebp,eax
//add esp,04
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"hook DB_LinkXAssetEntry1 for asset name lua print"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

label(Type_ptr)

label(LogScriptFile)
label(LogRawFile)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here


//mov edx, [esp+14]
// Type_ptr=edx

LogRawFile:
cmp [esp+14], 26
jne LogScriptFile

{$luacode xAssetName=ecx}

--- print(readString(readInteger(xAssetName)) .. "   --&gt;&gt; Type: " .. string.format("%#x", Type_ptr))

print(readString(readInteger(xAssetName)) .. " --&gt;&gt; RawFile")

{$asm}


LogScriptFile:
cmp [esp+14], 27
jne originalcode

{$luacode xAssetName=ecx}

print(readString(readInteger(xAssetName)) .. " --&gt;&gt; ScriptFile")

{$asm}





originalcode:
push ebx
push ebp
mov ebp,[esp+1C]

exit:
jmp returnhere

Type_ptr:
dd 00

"iw5sp.exe"+1857C9:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+1857C9:
db 53 55 8B 6C 24 1C
//push ebx
//push ebp
//mov ebp,[esp+1C]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"hook DB_LinkXAssetEntry1 for asset name lua print ___2 dumper"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

label(Type_ptr)

label(LogScriptFile)
label(LogRawFile)

{$lua}

mw3_path = "E:\\Call of Duty - Modern Warfare 3\\RawFileDump\\"

function create_directories(path)
    os.execute('mkdir "' .. path .. '"')
end

function create_or_replace_file(full_path, content)
    -- Extract the directory path from the full file path
    local directory_path = full_path:match("(.*\\)[^\\]+$")

    -- Create missing directories
    create_directories(directory_path)

    -- Open the file in binary write mode ("wb"), create or replace
    local file = io.open(full_path, "wb")
    if file then
        file:write(content)
        file:close()
        print("File created/replaced successfully.")
    else
        print("Failed to create or replace file.")
    end
end

function serialize_table(tbl)
    local buffer = ""
    for _, value in ipairs(tbl) do
        if type(value) == "number" then
            -- Convert number to a single byte (1-byte unsigned integer)
            buffer = buffer .. string.pack("B", value)  -- Use "B" for unsigned 1-byte integers
        elseif type(value) == "string" then
            -- Write string content without a length prefix if you don't want extra bytes
            buffer = buffer .. value
        else
            error("Unsupported data type in table!")
        end
    end
    return buffer
end

{$asm}

newmem: //this is allocated memory, you have read,write,execute access
//place your code here


//mov edx, [esp+14]
// Type_ptr=edx

LogRawFile:
cmp [esp+14], 26
jne LogScriptFile

{$luacode xAsset=ecx}

print(readString(readInteger(xAsset)) .. " --&gt;&gt; RawFile")


filename      = readString(readInteger(xAsset))
compressedLen = readInteger(xAsset+4)  --- compressedLen
len           = readInteger(xAsset+8)  --- len
buffer        = readInteger(xAsset+0xc)  --- buffer

--- print(string.format("%#x", buffer))

if  string.sub(filename, -4) ~= ".rmb"
and string.sub(filename, -4) ~= ".atr"
and string.sub(filename, -7) ~= ".vision"
and string.sub(filename, -4) ~= ".def"
and string.sub(filename, -6) ~= ".shock"
and string.sub(filename, -6) ~= ".graph"
then
    newFile = mw3_path .. filename
    newFile_fix = string.gsub(newFile, "/", "\\")

    buffer_HEX = string.format("%x", buffer)

    --- READ BUFFER
    buffer = readBytes(buffer_HEX, compressedLen, true)

    content = serialize_table(buffer)

    create_or_replace_file(newFile_fix, content)
else
    --- print("This file is filtered in the dump script.")
end


{$asm}


LogScriptFile:
cmp [esp+14], 27
jne originalcode

{$luacode xAsset=ecx}

--- print(readString(readInteger(xAsset)) .. " --&gt;&gt; ScriptFile")

--[[
filename         = readString(readInteger(xAsset))

--- messy file
if filename ~= "$default"
then

    compressedLen    = readInteger(xAsset+4)  --- compressedLen
    len              = readInteger(xAsset+8)  --- len
    bytecodeLen      = readInteger(xAsset+0xc)
    buffer           = readInteger(xAsset+0x10)
    bytecode_buffer  = readInteger(xAsset+0x14)


    newFile = mw3_path .. filename
    newFile_fix = string.gsub(newFile, "/", "\\")

    buffer_HEX = string.format("%x", buffer)

    --- READ BUFFER
    buffer = readBytes(buffer_HEX, compressedLen, true)

    content = serialize_table(buffer)

    create_or_replace_file(newFile_fix, content)
    newFile = mw3_path .. filename
    newFile_fix = string.gsub(newFile, "/", "\\")

    buffer_HEX = string.format("%x", buffer)

    --- READ BUFFER
    buffer = readBytes(buffer_HEX, compressedLen, true)

    content = serialize_table(buffer)

    create_or_replace_file(newFile_fix, content)
else
    print("This file is filtered in the dump script.")
end
]]---

{$asm}



originalcode:
push ebx
push ebp
mov ebp,[esp+1C]

exit:
jmp returnhere

Type_ptr:
dd 00

"iw5sp.exe"+1857C9:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+1857C9:
db 53 55 8B 6C 24 1C
//push ebx
//push ebp
//mov ebp,[esp+1C]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"hook DB_LinkXAssetEntry0 for asset name lua log file"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(restore)

label(filename)
label(string)
label(newline)
label(hFile)
label(bytesWritten)

label(XAssetEntry)

label(RawFile)
label(ScriptFile)

newmem:

pushfd
pushad


mov [XAssetEntry], esi


mov [string], eax


push ebp
mov ebp,esp

sub esp, 200


// get XAsset's type and filter by it
cmp [esi], 26
je RawFile
cmp [esi], 27
je ScriptFile

jmp restore


ScriptFile:
{$luacode xAssetName=eax Type=esi}

xAsset = readPointer(address)
print("xAsset Ptr is: " .. string.format("%#x", readInteger(xAsset)))


compressedLen = readInteger(xAsset+4)  --- compressedLen
len           = readInteger(xAsset+8)  --- len
bytecodeLen   = readInteger(xAsset+c)  --- bytecodeLen
buffer        = readInteger(xAsset+10) --- buffer

print(len)
print(bytecodeLen)


f = io.open("E:\\Call of Duty - Modern Warfare 3\\RawFileDump" .. "\\" .. readString(xAssetName),"a+");
--- f:write("hello world!\n");
file:write(buffer:raw(buffer, len))
f:close();

--- print(readString(xAssetName) + "  --&gt;&gt; type: " + string.format("%#x", readInteger(Type)))

print(readString(xAssetName) .. "  --&gt;&gt; Type: " .. string.format("%#x", readInteger(Type)))
{$asm}




RawFile:
{$luacode xAssetName=eax Type=esi}

xAsset = readPointer(address)
print(xAsset)
print("xAsset Ptr is: " .. string.format("%#x", readInteger(xAsset)))

{$asm}


restore:
add esp, 200
leave


popad
popfd


originalcode:
mov ebp,eax
add esp,04

exit:
jmp returnhere


filename:
db 'E:\Call of Duty - Modern Warfare 3\Log_LinkAssetEntry0.txt', 0

string:
dd 00

newline:
db 0A

hFile:
dd 00

bytesWritten:
dd 00

XAssetEntry:
dd 00


"iw5sp.exe"+1855DE:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+1855DE:
db 8B E8 83 C4 04
//mov ebp,eax
//add esp,04
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Scr_SetLoading always true"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

"iw5sp.exe"+750B0:
or eax,01
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+750B0:
db 8B 44 24 04 A3 10 FD BE 01
//mov eax,[esp+04]
//mov [01BEFD10],eax
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"null Path_AutoDisconnectPaths"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]


"iw5sp.exe"+381C0:
ret


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+381C0:
db 56 33 F6 39 35 D8 7E 39 01
//push esi
//xor esi,esi
//cmp [01397ED8],esi
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"Kill Anti CE"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

"iw5sp.exe"+3E1D10:
db c3


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"iw5sp.exe"+3E1D10:
db 55 8B EC 68 40 1B 7E 00
//push ebp
//mov ebp,esp
//push 007E1B40
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"Global Addresses"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>32</ID>
          <Description>"MainThreadID"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>018576C8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Buffer"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>String</VariableType>
          <Length>111</Length>
          <Unicode>0</Unicode>
          <CodePage>0</CodePage>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>0176A4C8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"buff_script_name_label_str"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>01BF2578</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>29</ID>
              <Description>"Index"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>0x01BEFCF8</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>27</ID>
          <Description>"scrVarPub_checksum"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>01BCBCD0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"scrCompilePub_loadedscripts"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>0186C668</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"scrCompilePub_scriptsPos"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>0186C66C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"scrCompilePub_scriptsCount"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>0186C670</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"scrVarPub_levelId"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>01BCBCA4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"scrVmPub_function_count"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>01BF2588</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"g_largeLocalBuf"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>01C2FF20</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"scrVarPub_programBuffer"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>01BCBCDC</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>22</ID>
              <Description>"bytes"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Array of byte</VariableType>
              <ByteLength>10</ByteLength>
              <Address>33BA0000</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>0</ID>
          <Description>"auth load"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>00B6DE80</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Structures StructVersion="2">
    <Structure Name="XAsset" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000000" Description="ID" DisplayMethod="hexadecimal"/>
        <Element Offset="4" Vartype="Pointer" Bytesize="8" OffsetHex="00000004" Description="header" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 00FD70BC" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="name" DisplayMethod="unsigned integer">
                <Structure Name="Autocreated from 09007268" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="String" Bytesize="7" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="4" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000004" Description="compressedLen" DisplayMethod="hexadecimal"/>
              <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" Description="len" DisplayMethod="hexadecimal"/>
              <Element Offset="12" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000000C" Description="bytecodeLen" DisplayMethod="hexadecimal"/>
              <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="buffer" DisplayMethod="unsigned integer">
                <Structure Name="Autocreated from 0F89CBF8" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Array of byte" Bytesize="1000" OffsetHex="00000000" DisplayMethod="hexadecimal"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="20" Vartype="Pointer" Bytesize="8" OffsetHex="00000014" Description="byteCode" DisplayMethod="unsigned integer">
                <Structure Name="Autocreated from 0F89D3F8" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
                  <Elements>
                    <Element Offset="0" Vartype="Array of byte" Bytesize="1000" OffsetHex="00000000" DisplayMethod="hexadecimal"/>
                  </Elements>
                </Structure>
              </Element>
              <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
      </Elements>
    </Structure>
    <Structure Name="Functions" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000000" Description="maxSize" DisplayMethod="unsigned integer"/>
        <Element Offset="4" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000004" Description="currentSize" DisplayMethod="unsigned integer"/>
        <Element Offset="8" Vartype="Pointer" Bytesize="8" OffsetHex="00000008" Description="Handle array" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 095A0080" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="6" OffsetHex="00000000" DisplayMethod="hexadecimal"/>
              <Element Offset="24" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000018" DisplayMethod="unsigned integer"/>
              <Element Offset="28" Vartype="Pointer" Bytesize="8" OffsetHex="0000001C" DisplayMethod="unsigned integer"/>
              <Element Offset="32" Vartype="Pointer" Bytesize="8" OffsetHex="00000020" DisplayMethod="unsigned integer"/>
              <Element Offset="36" Vartype="Pointer" Bytesize="8" OffsetHex="00000024" DisplayMethod="unsigned integer"/>
              <Element Offset="40" Vartype="Pointer" Bytesize="8" OffsetHex="00000028" DisplayMethod="unsigned integer"/>
              <Element Offset="44" Vartype="Pointer" Bytesize="8" OffsetHex="0000002C" DisplayMethod="unsigned integer"/>
              <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" DisplayMethod="unsigned integer"/>
              <Element Offset="52" Vartype="Pointer" Bytesize="8" OffsetHex="00000034" DisplayMethod="unsigned integer"/>
              <Element Offset="56" Vartype="Pointer" Bytesize="8" OffsetHex="00000038" DisplayMethod="unsigned integer"/>
              <Element Offset="60" Vartype="Pointer" Bytesize="8" OffsetHex="0000003C" DisplayMethod="unsigned integer"/>
              <Element Offset="64" Vartype="Pointer" Bytesize="8" OffsetHex="00000040" DisplayMethod="unsigned integer"/>
              <Element Offset="68" Vartype="Pointer" Bytesize="8" OffsetHex="00000044" DisplayMethod="unsigned integer"/>
              <Element Offset="72" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000048" DisplayMethod="unsigned integer"/>
              <Element Offset="76" Vartype="Pointer" Bytesize="8" OffsetHex="0000004C" DisplayMethod="unsigned integer"/>
              <Element Offset="80" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000050" DisplayMethod="unsigned integer"/>
              <Element Offset="84" Vartype="Pointer" Bytesize="8" OffsetHex="00000054" DisplayMethod="unsigned integer"/>
              <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="unsigned integer"/>
              <Element Offset="92" Vartype="Pointer" Bytesize="8" OffsetHex="0000005C" DisplayMethod="unsigned integer"/>
              <Element Offset="96" Vartype="Pointer" Bytesize="8" OffsetHex="00000060" DisplayMethod="unsigned integer"/>
              <Element Offset="100" Vartype="Pointer" Bytesize="8" OffsetHex="00000064" DisplayMethod="unsigned integer"/>
              <Element Offset="104" Vartype="Pointer" Bytesize="8" OffsetHex="00000068" DisplayMethod="unsigned integer"/>
              <Element Offset="108" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000006C" DisplayMethod="hexadecimal"/>
              <Element Offset="112" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000070" DisplayMethod="unsigned integer"/>
              <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" DisplayMethod="hexadecimal"/>
              <Element Offset="120" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000078" DisplayMethod="unsigned integer"/>
              <Element Offset="124" Vartype="Pointer" Bytesize="8" OffsetHex="0000007C" DisplayMethod="unsigned integer"/>
              <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" DisplayMethod="unsigned integer"/>
              <Element Offset="132" Vartype="Pointer" Bytesize="8" OffsetHex="00000084" DisplayMethod="unsigned integer"/>
              <Element Offset="136" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000088" DisplayMethod="unsigned integer"/>
              <Element Offset="140" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000008C" DisplayMethod="hexadecimal"/>
              <Element Offset="144" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000090" DisplayMethod="unsigned integer"/>
              <Element Offset="148" Vartype="4 Bytes" Bytesize="4" RLECount="48" OffsetHex="00000094" DisplayMethod="hexadecimal"/>
              <Element Offset="340" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000154" DisplayMethod="unsigned integer"/>
              <Element Offset="344" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000158" DisplayMethod="hexadecimal"/>
              <Element Offset="348" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000015C" DisplayMethod="unsigned integer"/>
              <Element Offset="352" Vartype="Pointer" Bytesize="8" OffsetHex="00000160" DisplayMethod="unsigned integer"/>
              <Element Offset="356" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000164" DisplayMethod="unsigned integer"/>
              <Element Offset="360" Vartype="Pointer" Bytesize="8" OffsetHex="00000168" DisplayMethod="unsigned integer"/>
              <Element Offset="364" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000016C" DisplayMethod="unsigned integer"/>
              <Element Offset="368" Vartype="Pointer" Bytesize="8" OffsetHex="00000170" DisplayMethod="unsigned integer"/>
              <Element Offset="372" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000174" DisplayMethod="unsigned integer"/>
              <Element Offset="376" Vartype="Pointer" Bytesize="8" OffsetHex="00000178" DisplayMethod="unsigned integer"/>
              <Element Offset="380" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000017C" DisplayMethod="unsigned integer"/>
              <Element Offset="384" Vartype="Pointer" Bytesize="8" OffsetHex="00000180" DisplayMethod="unsigned integer"/>
              <Element Offset="388" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000184" DisplayMethod="unsigned integer"/>
              <Element Offset="392" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000188" DisplayMethod="hexadecimal"/>
              <Element Offset="396" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000018C" DisplayMethod="unsigned integer"/>
              <Element Offset="400" Vartype="Pointer" Bytesize="8" OffsetHex="00000190" DisplayMethod="unsigned integer"/>
              <Element Offset="404" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000194" DisplayMethod="unsigned integer"/>
              <Element Offset="408" Vartype="4 Bytes" Bytesize="4" RLECount="14" OffsetHex="00000198" DisplayMethod="hexadecimal"/>
              <Element Offset="464" Vartype="String" Bytesize="29" OffsetHex="000001D0" DisplayMethod="unsigned integer"/>
              <Element Offset="493" Vartype="Byte" Bytesize="1" OffsetHex="000001ED" DisplayMethod="unsigned integer"/>
              <Element Offset="494" Vartype="2 Bytes" Bytesize="2" OffsetHex="000001EE" DisplayMethod="unsigned integer"/>
              <Element Offset="496" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001F0" DisplayMethod="hexadecimal"/>
              <Element Offset="500" Vartype="String" Bytesize="30" OffsetHex="000001F4" DisplayMethod="unsigned integer"/>
              <Element Offset="530" Vartype="Byte" Bytesize="1" RLECount="2" OffsetHex="00000212" DisplayMethod="unsigned integer"/>
              <Element Offset="532" Vartype="Pointer" Bytesize="8" OffsetHex="00000214" DisplayMethod="unsigned integer"/>
              <Element Offset="536" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000218" DisplayMethod="hexadecimal"/>
              <Element Offset="540" Vartype="String" Bytesize="19" OffsetHex="0000021C" DisplayMethod="unsigned integer"/>
              <Element Offset="559" Vartype="Byte" Bytesize="1" OffsetHex="0000022F" DisplayMethod="unsigned integer"/>
              <Element Offset="560" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000230" DisplayMethod="hexadecimal"/>
              <Element Offset="564" Vartype="Pointer" Bytesize="8" OffsetHex="00000234" DisplayMethod="unsigned integer"/>
              <Element Offset="568" Vartype="Byte" Bytesize="1" OffsetHex="00000238" DisplayMethod="unsigned integer"/>
              <Element Offset="569" Vartype="String" Bytesize="20" OffsetHex="00000239" DisplayMethod="unsigned integer"/>
              <Element Offset="589" Vartype="Byte" Bytesize="1" RLECount="2" OffsetHex="0000024D" DisplayMethod="unsigned integer"/>
              <Element Offset="591" Vartype="String" Bytesize="4" OffsetHex="0000024F" DisplayMethod="unsigned integer"/>
              <Element Offset="595" Vartype="Byte" Bytesize="1" OffsetHex="00000253" DisplayMethod="unsigned integer"/>
              <Element Offset="596" Vartype="Pointer" Bytesize="8" OffsetHex="00000254" DisplayMethod="unsigned integer"/>
              <Element Offset="600" Vartype="String" Bytesize="69" OffsetHex="00000258" DisplayMethod="unsigned integer"/>
              <Element Offset="669" Vartype="Byte" Bytesize="1" OffsetHex="0000029D" DisplayMethod="unsigned integer"/>
              <Element Offset="670" Vartype="2 Bytes" Bytesize="2" OffsetHex="0000029E" DisplayMethod="unsigned integer"/>
              <Element Offset="672" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002A0" DisplayMethod="hexadecimal"/>
              <Element Offset="676" Vartype="String" Bytesize="23" OffsetHex="000002A4" DisplayMethod="unsigned integer"/>
              <Element Offset="699" Vartype="Byte" Bytesize="1" OffsetHex="000002BB" DisplayMethod="unsigned integer"/>
              <Element Offset="700" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000002BC" DisplayMethod="hexadecimal"/>
              <Element Offset="708" Vartype="String" Bytesize="10" OffsetHex="000002C4" DisplayMethod="unsigned integer"/>
              <Element Offset="718" Vartype="Byte" Bytesize="1" RLECount="3" OffsetHex="000002CE" DisplayMethod="unsigned integer"/>
              <Element Offset="721" Vartype="String" Bytesize="4" OffsetHex="000002D1" DisplayMethod="unsigned integer"/>
              <Element Offset="725" Vartype="Byte" Bytesize="1" RLECount="3" OffsetHex="000002D5" DisplayMethod="unsigned integer"/>
              <Element Offset="728" Vartype="String" Bytesize="18" OffsetHex="000002D8" DisplayMethod="unsigned integer"/>
              <Element Offset="746" Vartype="Byte" Bytesize="1" RLECount="2" OffsetHex="000002EA" DisplayMethod="unsigned integer"/>
              <Element Offset="748" Vartype="String" Bytesize="4" OffsetHex="000002EC" DisplayMethod="unsigned integer"/>
              <Element Offset="752" Vartype="Pointer" Bytesize="8" OffsetHex="000002F0" DisplayMethod="unsigned integer"/>
              <Element Offset="756" Vartype="4 Bytes" Bytesize="4" OffsetHex="000002F4" DisplayMethod="hexadecimal"/>
              <Element Offset="760" Vartype="Pointer" Bytesize="8" OffsetHex="000002F8" DisplayMethod="unsigned integer"/>
              <Element Offset="764" Vartype="String" Bytesize="13" OffsetHex="000002FC" DisplayMethod="unsigned integer"/>
              <Element Offset="777" Vartype="Byte" Bytesize="1" RLECount="3" OffsetHex="00000309" DisplayMethod="unsigned integer"/>
              <Element Offset="780" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000030C" DisplayMethod="hexadecimal"/>
              <Element Offset="784" Vartype="Pointer" Bytesize="8" OffsetHex="00000310" DisplayMethod="unsigned integer"/>
              <Element Offset="788" Vartype="Byte" Bytesize="1" OffsetHex="00000314" DisplayMethod="unsigned integer"/>
              <Element Offset="789" Vartype="String" Bytesize="10" OffsetHex="00000315" DisplayMethod="unsigned integer"/>
              <Element Offset="799" Vartype="Byte" Bytesize="1" OffsetHex="0000031F" DisplayMethod="unsigned integer"/>
              <Element Offset="800" Vartype="Pointer" Bytesize="8" OffsetHex="00000320" DisplayMethod="unsigned integer"/>
              <Element Offset="804" Vartype="String" Bytesize="19" OffsetHex="00000324" DisplayMethod="unsigned integer"/>
              <Element Offset="823" Vartype="Byte" Bytesize="1" RLECount="2" OffsetHex="00000337" DisplayMethod="unsigned integer"/>
              <Element Offset="825" Vartype="String" Bytesize="12" OffsetHex="00000339" DisplayMethod="unsigned integer"/>
              <Element Offset="837" Vartype="Byte" Bytesize="1" RLECount="3" OffsetHex="00000345" DisplayMethod="unsigned integer"/>
              <Element Offset="840" Vartype="String" Bytesize="30" OffsetHex="00000348" DisplayMethod="unsigned integer"/>
              <Element Offset="870" Vartype="Byte" Bytesize="1" RLECount="2" OffsetHex="00000366" DisplayMethod="unsigned integer"/>
              <Element Offset="872" Vartype="String" Bytesize="4" OffsetHex="00000368" DisplayMethod="unsigned integer"/>
              <Element Offset="876" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000036C" DisplayMethod="hexadecimal"/>
              <Element Offset="880" Vartype="Byte" Bytesize="1" OffsetHex="00000370" DisplayMethod="unsigned integer"/>
              <Element Offset="881" Vartype="String" Bytesize="15" OffsetHex="00000371" DisplayMethod="unsigned integer"/>
              <Element Offset="896" Vartype="Pointer" Bytesize="8" OffsetHex="00000380" DisplayMethod="unsigned integer"/>
              <Element Offset="900" Vartype="4 Bytes" Bytesize="4" RLECount="799" OffsetHex="00000384" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
      </Elements>
    </Structure>
    <Structure Name="unnamed structure" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="99" OffsetHex="00000000" DisplayMethod="hexadecimal"/>
        <Element Offset="396" Vartype="4 Bytes" Bytesize="4" RLECount="29" OffsetHex="0000018C" DisplayMethod="unsigned integer"/>
      </Elements>
    </Structure>
    <Structure Name="p_xZoneInfo" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="name" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 008314F4" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="String" Bytesize="44" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="4" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000004" Description="allocFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" Description="freeFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="12" Vartype="Pointer" Bytesize="8" OffsetHex="0000000C" Description="name" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 008619A0" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="String" Bytesize="33" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="16" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000010" Description="allocFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="20" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000014" Description="freeFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" Description="name" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 0013E7CC" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="String" Bytesize="27" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="28" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000001C" Description="allocFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="32" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000020" Description="freeFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="36" Vartype="Pointer" Bytesize="8" OffsetHex="00000024" Description="name" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 0013E80C" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="String" Bytesize="29" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="40" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000028" Description="allocFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="44" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000002C" Description="freeFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="48" Vartype="Pointer" Bytesize="8" OffsetHex="00000030" Description="name" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 0013E8C8" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="String" Bytesize="21" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="52" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000034" Description="allocFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="56" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000038" Description="freeFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="60" Vartype="Pointer" Bytesize="8" OffsetHex="0000003C" Description="name" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 63746170" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="String" Bytesize="44" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="64" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000040" Description="allocFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="68" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000044" Description="freeFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="72" Vartype="Pointer" Bytesize="8" OffsetHex="00000048" Description="name" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 61766976" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="String" Bytesize="33" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="76" Vartype="String" Bytesize="33" OffsetHex="0000004C" Description="allocFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="80" Vartype="String" Bytesize="1" OffsetHex="00000050" Description="freeFlags" DisplayMethod="unsigned integer"/>
        <Element Offset="84" Vartype="String" Bytesize="1" OffsetHex="00000054" DisplayMethod="unsigned integer"/>
        <Element Offset="88" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000058" DisplayMethod="unsigned integer"/>
        <Element Offset="92" Vartype="Pointer" Bytesize="8" OffsetHex="0000005C" DisplayMethod="unsigned integer"/>
        <Element Offset="96" Vartype="4 Bytes" Bytesize="4" RLECount="5" OffsetHex="00000060" DisplayMethod="unsigned integer"/>
        <Element Offset="116" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000074" DisplayMethod="hexadecimal"/>
        <Element Offset="120" Vartype="Pointer" Bytesize="8" OffsetHex="00000078" DisplayMethod="unsigned integer"/>
        <Element Offset="124" Vartype="Pointer" Bytesize="8" OffsetHex="0000007C" DisplayMethod="unsigned integer"/>
        <Element Offset="128" Vartype="Pointer" Bytesize="8" OffsetHex="00000080" DisplayMethod="unsigned integer"/>
        <Element Offset="132" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000084" DisplayMethod="unsigned integer"/>
        <Element Offset="136" Vartype="Pointer" Bytesize="8" OffsetHex="00000088" DisplayMethod="unsigned integer"/>
        <Element Offset="140" Vartype="4 Bytes" Bytesize="4" RLECount="3" OffsetHex="0000008C" DisplayMethod="unsigned integer"/>
        <Element Offset="152" Vartype="Double" Bytesize="8" OffsetHex="00000098" DisplayMethod="unsigned integer"/>
        <Element Offset="160" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000A0" DisplayMethod="hexadecimal"/>
        <Element Offset="164" Vartype="4 Bytes" Bytesize="4" RLECount="5" OffsetHex="000000A4" DisplayMethod="unsigned integer"/>
        <Element Offset="184" Vartype="Pointer" Bytesize="8" OffsetHex="000000B8" DisplayMethod="unsigned integer"/>
        <Element Offset="188" Vartype="Pointer" Bytesize="8" OffsetHex="000000BC" DisplayMethod="unsigned integer"/>
        <Element Offset="192" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000000C0" DisplayMethod="unsigned integer"/>
        <Element Offset="200" Vartype="Pointer" Bytesize="8" OffsetHex="000000C8" DisplayMethod="unsigned integer"/>
        <Element Offset="204" Vartype="Pointer" Bytesize="8" OffsetHex="000000CC" DisplayMethod="unsigned integer"/>
        <Element Offset="208" Vartype="Pointer" Bytesize="8" OffsetHex="000000D0" DisplayMethod="unsigned integer"/>
        <Element Offset="212" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000D4" DisplayMethod="unsigned integer"/>
        <Element Offset="216" Vartype="Pointer" Bytesize="8" OffsetHex="000000D8" DisplayMethod="unsigned integer"/>
        <Element Offset="220" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000DC" DisplayMethod="hexadecimal"/>
        <Element Offset="224" Vartype="Pointer" Bytesize="8" OffsetHex="000000E0" DisplayMethod="unsigned integer"/>
        <Element Offset="228" Vartype="Pointer" Bytesize="8" OffsetHex="000000E4" DisplayMethod="unsigned integer"/>
        <Element Offset="232" Vartype="Pointer" Bytesize="8" OffsetHex="000000E8" DisplayMethod="unsigned integer"/>
        <Element Offset="236" Vartype="Pointer" Bytesize="8" OffsetHex="000000EC" DisplayMethod="unsigned integer"/>
        <Element Offset="240" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000F0" DisplayMethod="unsigned integer"/>
        <Element Offset="244" Vartype="Pointer" Bytesize="8" OffsetHex="000000F4" DisplayMethod="unsigned integer"/>
        <Element Offset="248" Vartype="Pointer" Bytesize="8" OffsetHex="000000F8" DisplayMethod="unsigned integer"/>
        <Element Offset="252" Vartype="Pointer" Bytesize="8" OffsetHex="000000FC" DisplayMethod="unsigned integer"/>
        <Element Offset="256" Vartype="Pointer" Bytesize="8" OffsetHex="00000100" DisplayMethod="unsigned integer"/>
        <Element Offset="260" Vartype="Pointer" Bytesize="8" OffsetHex="00000104" DisplayMethod="unsigned integer"/>
        <Element Offset="264" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000108" DisplayMethod="unsigned integer"/>
        <Element Offset="268" Vartype="Pointer" Bytesize="8" OffsetHex="0000010C" DisplayMethod="unsigned integer"/>
        <Element Offset="272" Vartype="Byte" Bytesize="1" OffsetHex="00000110" DisplayMethod="unsigned integer"/>
        <Element Offset="273" Vartype="String" Bytesize="7" OffsetHex="00000111" DisplayMethod="unsigned integer"/>
        <Element Offset="280" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000118" DisplayMethod="unsigned integer"/>
        <Element Offset="284" Vartype="Pointer" Bytesize="8" OffsetHex="0000011C" DisplayMethod="unsigned integer"/>
        <Element Offset="288" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000120" DisplayMethod="unsigned integer"/>
        <Element Offset="292" Vartype="Pointer" Bytesize="8" OffsetHex="00000124" DisplayMethod="unsigned integer"/>
        <Element Offset="296" Vartype="Pointer" Bytesize="8" OffsetHex="00000128" DisplayMethod="unsigned integer"/>
        <Element Offset="300" Vartype="Pointer" Bytesize="8" OffsetHex="0000012C" DisplayMethod="unsigned integer"/>
        <Element Offset="304" Vartype="Pointer" Bytesize="8" OffsetHex="00000130" DisplayMethod="unsigned integer"/>
        <Element Offset="308" Vartype="Pointer" Bytesize="8" OffsetHex="00000134" DisplayMethod="unsigned integer"/>
        <Element Offset="312" Vartype="Pointer" Bytesize="8" OffsetHex="00000138" DisplayMethod="unsigned integer"/>
        <Element Offset="316" Vartype="Pointer" Bytesize="8" OffsetHex="0000013C" DisplayMethod="unsigned integer"/>
        <Element Offset="320" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000140" DisplayMethod="unsigned integer"/>
        <Element Offset="324" Vartype="Pointer" Bytesize="8" OffsetHex="00000144" DisplayMethod="unsigned integer"/>
        <Element Offset="328" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000148" DisplayMethod="hexadecimal"/>
        <Element Offset="332" Vartype="Pointer" Bytesize="8" OffsetHex="0000014C" DisplayMethod="unsigned integer"/>
        <Element Offset="336" Vartype="Pointer" Bytesize="8" OffsetHex="00000150" DisplayMethod="unsigned integer"/>
        <Element Offset="340" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000154" DisplayMethod="unsigned integer"/>
        <Element Offset="344" Vartype="Pointer" Bytesize="8" OffsetHex="00000158" DisplayMethod="unsigned integer"/>
        <Element Offset="348" Vartype="Pointer" Bytesize="8" OffsetHex="0000015C" DisplayMethod="unsigned integer"/>
        <Element Offset="352" Vartype="Pointer" Bytesize="8" OffsetHex="00000160" DisplayMethod="unsigned integer"/>
        <Element Offset="356" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000164" DisplayMethod="unsigned integer"/>
        <Element Offset="360" Vartype="Pointer" Bytesize="8" OffsetHex="00000168" DisplayMethod="unsigned integer"/>
        <Element Offset="364" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000016C" DisplayMethod="unsigned integer"/>
        <Element Offset="368" Vartype="Pointer" Bytesize="8" OffsetHex="00000170" DisplayMethod="unsigned integer"/>
        <Element Offset="372" Vartype="Pointer" Bytesize="8" OffsetHex="00000174" DisplayMethod="unsigned integer"/>
        <Element Offset="376" Vartype="Pointer" Bytesize="8" OffsetHex="00000178" DisplayMethod="unsigned integer"/>
        <Element Offset="380" Vartype="Pointer" Bytesize="8" OffsetHex="0000017C" DisplayMethod="unsigned integer"/>
        <Element Offset="384" Vartype="Pointer" Bytesize="8" OffsetHex="00000180" DisplayMethod="unsigned integer"/>
        <Element Offset="388" Vartype="Pointer" Bytesize="8" OffsetHex="00000184" DisplayMethod="unsigned integer"/>
        <Element Offset="392" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000188" DisplayMethod="unsigned integer"/>
        <Element Offset="396" Vartype="Pointer" Bytesize="8" OffsetHex="0000018C" DisplayMethod="unsigned integer"/>
        <Element Offset="400" Vartype="Pointer" Bytesize="8" OffsetHex="00000190" DisplayMethod="unsigned integer"/>
        <Element Offset="404" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000194" DisplayMethod="hexadecimal"/>
        <Element Offset="408" Vartype="Pointer" Bytesize="8" OffsetHex="00000198" DisplayMethod="unsigned integer"/>
        <Element Offset="412" Vartype="Pointer" Bytesize="8" OffsetHex="0000019C" DisplayMethod="unsigned integer"/>
        <Element Offset="416" Vartype="4 Bytes" Bytesize="4" RLECount="2" OffsetHex="000001A0" DisplayMethod="unsigned integer"/>
        <Element Offset="424" Vartype="Pointer" Bytesize="8" OffsetHex="000001A8" DisplayMethod="unsigned integer"/>
        <Element Offset="428" Vartype="Pointer" Bytesize="8" OffsetHex="000001AC" DisplayMethod="unsigned integer"/>
        <Element Offset="432" Vartype="Pointer" Bytesize="8" OffsetHex="000001B0" DisplayMethod="unsigned integer"/>
        <Element Offset="436" Vartype="Pointer" Bytesize="8" OffsetHex="000001B4" DisplayMethod="unsigned integer"/>
        <Element Offset="440" Vartype="Pointer" Bytesize="8" OffsetHex="000001B8" DisplayMethod="unsigned integer"/>
        <Element Offset="444" Vartype="Pointer" Bytesize="8" OffsetHex="000001BC" DisplayMethod="unsigned integer"/>
        <Element Offset="448" Vartype="Pointer" Bytesize="8" OffsetHex="000001C0" DisplayMethod="unsigned integer"/>
        <Element Offset="452" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001C4" DisplayMethod="unsigned integer"/>
        <Element Offset="456" Vartype="Pointer" Bytesize="8" OffsetHex="000001C8" DisplayMethod="unsigned integer"/>
        <Element Offset="460" Vartype="Pointer" Bytesize="8" OffsetHex="000001CC" DisplayMethod="unsigned integer"/>
        <Element Offset="464" Vartype="Pointer" Bytesize="8" OffsetHex="000001D0" DisplayMethod="unsigned integer"/>
        <Element Offset="468" Vartype="Pointer" Bytesize="8" OffsetHex="000001D4" DisplayMethod="unsigned integer"/>
        <Element Offset="472" Vartype="Pointer" Bytesize="8" OffsetHex="000001D8" DisplayMethod="unsigned integer"/>
        <Element Offset="476" Vartype="Pointer" Bytesize="8" OffsetHex="000001DC" DisplayMethod="unsigned integer"/>
        <Element Offset="480" Vartype="4 Bytes" Bytesize="4" RLECount="4" OffsetHex="000001E0" DisplayMethod="unsigned integer"/>
        <Element Offset="496" Vartype="Pointer" Bytesize="8" OffsetHex="000001F0" DisplayMethod="unsigned integer"/>
        <Element Offset="500" Vartype="Pointer" Bytesize="8" OffsetHex="000001F4" DisplayMethod="unsigned integer"/>
        <Element Offset="504" Vartype="Pointer" Bytesize="8" OffsetHex="000001F8" DisplayMethod="unsigned integer"/>
        <Element Offset="508" Vartype="4 Bytes" Bytesize="4" OffsetHex="000001FC" DisplayMethod="unsigned integer"/>
      </Elements>
    </Structure>
    <Structure Name="entries" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="2 Bytes" Bytesize="2" RLECount="17" OffsetHex="00000000" DisplayMethod="hexadecimal"/>
        <Element Offset="36" Vartype="2 Bytes" Bytesize="2" OffsetHex="00000024" DisplayMethod="hexadecimal"/>
        <Element Offset="40" Vartype="2 Bytes" Bytesize="2" OffsetHex="00000028" DisplayMethod="hexadecimal"/>
        <Element Offset="44" Vartype="2 Bytes" Bytesize="2" OffsetHex="0000002C" DisplayMethod="hexadecimal"/>
        <Element Offset="48" Vartype="2 Bytes" Bytesize="2" OffsetHex="00000030" DisplayMethod="hexadecimal"/>
        <Element Offset="52" Vartype="4 Bytes" Bytesize="4" RLECount="115" OffsetHex="00000034" DisplayMethod="unsigned integer"/>
      </Elements>
    </Structure>
    <Structure Name="scriptHeader" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="Pointer" Bytesize="8" OffsetHex="00000000" Description="Name" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 2DCB9B00" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="String" Bytesize="200" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="4" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000004" Description="compressedLen" DisplayMethod="hexadecimal"/>
        <Element Offset="8" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000008" Description="len" DisplayMethod="hexadecimal"/>
        <Element Offset="12" Vartype="4 Bytes" Bytesize="4" OffsetHex="0000000C" Description="bytecodeLen" DisplayMethod="hexadecimal"/>
        <Element Offset="16" Vartype="Pointer" Bytesize="8" OffsetHex="00000010" Description="buffer" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 33D152C7" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Array of byte" Bytesize="500" OffsetHex="00000000" DisplayMethod="hexadecimal"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="20" Vartype="Pointer" Bytesize="8" OffsetHex="00000014" Description="byteCode" DisplayMethod="unsigned integer">
          <Structure Name="Autocreated from 33D15351" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
            <Elements>
              <Element Offset="0" Vartype="Array of byte" Bytesize="500" OffsetHex="00000000" DisplayMethod="hexadecimal"/>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="24" Vartype="Pointer" Bytesize="8" OffsetHex="00000018" DisplayMethod="unsigned integer"/>
      </Elements>
    </Structure>
  </Structures>
  <Comments>// lua code to print bytes of a buffer by Len

print(type(buffer))

buffer = 0x211a104d

decByteString = table.concat(readBytes(buffer, compressedLen, true), ' ')

print(decByteString)

</Comments>
</CheatTable>
